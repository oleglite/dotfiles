# If not running interactively, don't do anything
[ -z "$PS1" ] && return

__DEFAULT_COLOR="[0;00m"
__GRAY_COLOR="[0;37m"
__PINK_COLOR="[1;35m"
__GREEN_COLOR="[1;32m"
__ORANGE_COLOR="[1;33m"
__RED_COLOR="[1;31m"

if [ `id -u` == '0' ]; then
  __USER_COLOR=$__RED_COLOR
else
  __USER_COLOR=$__PINK_COLOR
fi

__VC_PROMPT=$' on \033[34m%n\033[00m:\033[00m%[unknown]b\033[32m'
__VC_PROMPT_EX="$__VC_PROMPT%m%u"
if hash vcprompt 2> /dev/null; then
  __HAVE_VCPROMPT=1
else
  __HAVE_VCPROMPT=0
fi

prompt_time() {
  echo -n $'\033[34m'
  echo -n $(date '+%H:%M:%S')
  echo -n $'\033[37m'
}

prompt_vcprompt() {
  path=`pwd`
  prompt="$__VC_PROMPT_EX"
  if [ $__HAVE_VCPROMPT == 1 ]; then
    vcprompt -f "$prompt"
  fi
}

prompt_lastcommandfailed() {
  code=$?
  if [ $code != 0 ]; then
    echo -n $'\033[37m exited \033[31m'
    echo -n $code
    echo -n $'\033[37m'
  fi
}

prompt_backgroundjobs() {
  jobs|python -c 'if 1:
    import sys
    items = ["\033[36m%s\033[37m" % x.split()[2]
             for x in sys.stdin.read().splitlines()]
    if items:
      if len(items) > 2:
        string = "%s, and %s" % (", ".join(items[:-1]), items[-1])
      else:
        string = ", ".join(items)
      print("\033[37m running %s" % string)
  '
}

prompt_virtualenv() {
  if [ x$VIRTUAL_ENV != x ]; then
    if [[ $VIRTUAL_ENV == *.virtualenvs/* ]]; then
      ENV_NAME=`basename "${VIRTUAL_ENV}"`
    else
      folder=`dirname "${VIRTUAL_ENV}"`
      ENV_NAME=`basename "$folder"`
    fi
    echo -n $' \033[37mworkon \033[31m'
    echo -n $ENV_NAME
    echo -n $'\033[00m'
    # Shell title
    echo -n $'\033]0;venv:'
    echo -n $ENV_NAME
    echo -n $'\007'
  fi

  # Also setup our readline properly constantly since
  # stuff tends to overwrite this.
  stty werase undef
  bind '"\C-w": unix-filename-rubout'
}

export __BASEPROMPT='\e]0;\007\n\
[`prompt_time`] \
\e${__USER_COLOR}\u \
\e${__GRAY_COLOR}at \e${__ORANGE_COLOR}\h \
\e${__GRAY_COLOR}in \e${__GREEN_COLOR}\w\
`prompt_lastcommandfailed`\
\e${__GRAY_COLOR}`prompt_vcprompt`\
`prompt_backgroundjobs`\
`prompt_virtualenv`\
\e${__DEFAULT_COLOR}'
export PS1="\[\033[G\]${__BASEPROMPT}
$ "

export TERM=xterm-256color

shopt -s histappend

# Make sure window sizes update correctly.
shopt -s checkwinsize

# Completions
if [ -f /usr/local/git/contrib/completion ]; then
  . /usr/local/git/contrib/completion/git-completion.bash
fi
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

function abspath() {
    # https://stackoverflow.com/questions/3915040/bash-fish-command-to-print-absolute-path-to-a-file
    # generate absolute path from relative path
    # $1     : relative filename
    # return : absolute path
    if [ -d "$1" ]; then
        # dir
        (cd "$1"; pwd)
    elif [ -f "$1" ]; then
        # file
        if [[ $1 = /* ]]; then
            echo "$1"
        elif [[ $1 == */* ]]; then
            echo "$(cd "${1%/*}"; pwd)/${1##*/}"
        else
            echo "$(pwd)/$1"
        fi
    fi
}
export -f abspath

# https://eli.thegreenplace.net/2013/06/11/keeping-persistent-history-in-bash
log_bash_persistent_history()
{
  [[
    $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$
  ]]
  local date_part="${BASH_REMATCH[1]}"
  local command_part="${BASH_REMATCH[2]}"
  if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]
  then
    echo $date_part "|" "$command_part" >> ~/.persistent_history
    export PERSISTENT_HISTORY_LAST="$command_part"
  fi
}
# Stuff to do on PROMPT_COMMAND
run_on_prompt_command()
{
    log_bash_persistent_history
}

export PROMPT_COMMAND="run_on_prompt_command"
HISTSIZE=10000                      # custom history size
HISTFILESIZE=100000                 # custom history file size
export HISTTIMEFORMAT="%Y-%m-%d %T "

. ~/.bashrc.local
. ~/.myprofile
. ~/.bash_aliases
